// 
// Copyright (c) 2011, Daniel Strother < http://danstrother.com/ >
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//   - Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//   - Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//   - The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// auto-generated by dlsc_sortnet_generate_module.pl
// using Perl Algorithm::Networksort
// algorithm:   batcher
// inputs:      12
// levels:      10
// comparators: 41

module dlsc_sortnet_12 #(
    parameter META      = 1,        // width of bypassed metadata
    parameter DATA      = 16,       // width of data for each element
    parameter ID        = 1,        // width of IDs for each element
    parameter PIPELINE  = 0,
    // derived; don't touch
    parameter ID_I      = (12*ID),
    parameter DATA_I    = (12*DATA)
) (
    input   wire                    clk,
    input   wire                    rst,

    input   wire                    in_valid,       // qualifier
    input   wire    [META-1:0]      in_meta,        // metadata to be delay-matched to sorting operation
    input   wire    [DATA_I-1:0]    in_data,        // unsorted data
    input   wire    [ID_I-1:0]      in_id,          // identifiers for unsorted data

    output  wire                    out_valid,      // delayed qualifier
    output  wire    [META-1:0]      out_meta,       // delayed in_meta
    output  wire    [DATA_I-1:0]    out_data,       // sorted data
    output  wire    [ID_I-1:0]      out_id          // identifiers for sorted data
);


// ** inputs **
wire    [ID-1:0]    lvl0_id [11:0];
wire    [DATA-1:0]  lvl0_data [11:0];
assign lvl0_id[0]   = in_id  [ (0*  ID) +:   ID ];
assign lvl0_data[0] = in_data[ (0*DATA) +: DATA ];
assign lvl0_id[1]   = in_id  [ (1*  ID) +:   ID ];
assign lvl0_data[1] = in_data[ (1*DATA) +: DATA ];
assign lvl0_id[2]   = in_id  [ (2*  ID) +:   ID ];
assign lvl0_data[2] = in_data[ (2*DATA) +: DATA ];
assign lvl0_id[3]   = in_id  [ (3*  ID) +:   ID ];
assign lvl0_data[3] = in_data[ (3*DATA) +: DATA ];
assign lvl0_id[4]   = in_id  [ (4*  ID) +:   ID ];
assign lvl0_data[4] = in_data[ (4*DATA) +: DATA ];
assign lvl0_id[5]   = in_id  [ (5*  ID) +:   ID ];
assign lvl0_data[5] = in_data[ (5*DATA) +: DATA ];
assign lvl0_id[6]   = in_id  [ (6*  ID) +:   ID ];
assign lvl0_data[6] = in_data[ (6*DATA) +: DATA ];
assign lvl0_id[7]   = in_id  [ (7*  ID) +:   ID ];
assign lvl0_data[7] = in_data[ (7*DATA) +: DATA ];
assign lvl0_id[8]   = in_id  [ (8*  ID) +:   ID ];
assign lvl0_data[8] = in_data[ (8*DATA) +: DATA ];
assign lvl0_id[9]   = in_id  [ (9*  ID) +:   ID ];
assign lvl0_data[9] = in_data[ (9*DATA) +: DATA ];
assign lvl0_id[10]   = in_id  [ (10*  ID) +:   ID ];
assign lvl0_data[10] = in_data[ (10*DATA) +: DATA ];
assign lvl0_id[11]   = in_id  [ (11*  ID) +:   ID ];
assign lvl0_data[11] = in_data[ (11*DATA) +: DATA ];


// ** level 1 **
// [[0,8],[1,9],[2,10],[3,11]]

wire    [ID-1:0]    lvl1_id [11:0];
wire    [DATA-1:0]  lvl1_data [11:0];

// level 1: compex(0,8)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_1_0_8 (
    .clk        ( clk ),
    .in_id0     ( lvl0_id[0] ),
    .in_data0   ( lvl0_data[0] ),
    .in_id1     ( lvl0_id[8] ),
    .in_data1   ( lvl0_data[8] ),
    .out_id0    ( lvl1_id[0] ),
    .out_data0  ( lvl1_data[0] ),
    .out_id1    ( lvl1_id[8] ),
    .out_data1  ( lvl1_data[8] )
);

// level 1: compex(1,9)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_1_1_9 (
    .clk        ( clk ),
    .in_id0     ( lvl0_id[1] ),
    .in_data0   ( lvl0_data[1] ),
    .in_id1     ( lvl0_id[9] ),
    .in_data1   ( lvl0_data[9] ),
    .out_id0    ( lvl1_id[1] ),
    .out_data0  ( lvl1_data[1] ),
    .out_id1    ( lvl1_id[9] ),
    .out_data1  ( lvl1_data[9] )
);

// level 1: compex(2,10)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_1_2_10 (
    .clk        ( clk ),
    .in_id0     ( lvl0_id[2] ),
    .in_data0   ( lvl0_data[2] ),
    .in_id1     ( lvl0_id[10] ),
    .in_data1   ( lvl0_data[10] ),
    .out_id0    ( lvl1_id[2] ),
    .out_data0  ( lvl1_data[2] ),
    .out_id1    ( lvl1_id[10] ),
    .out_data1  ( lvl1_data[10] )
);

// level 1: compex(3,11)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_1_3_11 (
    .clk        ( clk ),
    .in_id0     ( lvl0_id[3] ),
    .in_data0   ( lvl0_data[3] ),
    .in_id1     ( lvl0_id[11] ),
    .in_data1   ( lvl0_data[11] ),
    .out_id0    ( lvl1_id[3] ),
    .out_data0  ( lvl1_data[3] ),
    .out_id1    ( lvl1_id[11] ),
    .out_data1  ( lvl1_data[11] )
);

// level 1: pass-through 4
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_1_4 (
    .clk        ( clk ),
    .in_data    ( lvl0_data[4] ),
    .out_data   ( lvl1_data[4] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_1_4 (
    .clk        ( clk ),
    .in_data    ( lvl0_id[4] ),
    .out_data   ( lvl1_id[4] )
);

// level 1: pass-through 5
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_1_5 (
    .clk        ( clk ),
    .in_data    ( lvl0_data[5] ),
    .out_data   ( lvl1_data[5] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_1_5 (
    .clk        ( clk ),
    .in_data    ( lvl0_id[5] ),
    .out_data   ( lvl1_id[5] )
);

// level 1: pass-through 6
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_1_6 (
    .clk        ( clk ),
    .in_data    ( lvl0_data[6] ),
    .out_data   ( lvl1_data[6] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_1_6 (
    .clk        ( clk ),
    .in_data    ( lvl0_id[6] ),
    .out_data   ( lvl1_id[6] )
);

// level 1: pass-through 7
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_1_7 (
    .clk        ( clk ),
    .in_data    ( lvl0_data[7] ),
    .out_data   ( lvl1_data[7] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_1_7 (
    .clk        ( clk ),
    .in_data    ( lvl0_id[7] ),
    .out_data   ( lvl1_id[7] )
);


// ** level 2 **
// [[0,4],[1,5],[2,6],[3,7]]

wire    [ID-1:0]    lvl2_id [11:0];
wire    [DATA-1:0]  lvl2_data [11:0];

// level 2: compex(0,4)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_2_0_4 (
    .clk        ( clk ),
    .in_id0     ( lvl1_id[0] ),
    .in_data0   ( lvl1_data[0] ),
    .in_id1     ( lvl1_id[4] ),
    .in_data1   ( lvl1_data[4] ),
    .out_id0    ( lvl2_id[0] ),
    .out_data0  ( lvl2_data[0] ),
    .out_id1    ( lvl2_id[4] ),
    .out_data1  ( lvl2_data[4] )
);

// level 2: compex(1,5)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_2_1_5 (
    .clk        ( clk ),
    .in_id0     ( lvl1_id[1] ),
    .in_data0   ( lvl1_data[1] ),
    .in_id1     ( lvl1_id[5] ),
    .in_data1   ( lvl1_data[5] ),
    .out_id0    ( lvl2_id[1] ),
    .out_data0  ( lvl2_data[1] ),
    .out_id1    ( lvl2_id[5] ),
    .out_data1  ( lvl2_data[5] )
);

// level 2: compex(2,6)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_2_2_6 (
    .clk        ( clk ),
    .in_id0     ( lvl1_id[2] ),
    .in_data0   ( lvl1_data[2] ),
    .in_id1     ( lvl1_id[6] ),
    .in_data1   ( lvl1_data[6] ),
    .out_id0    ( lvl2_id[2] ),
    .out_data0  ( lvl2_data[2] ),
    .out_id1    ( lvl2_id[6] ),
    .out_data1  ( lvl2_data[6] )
);

// level 2: compex(3,7)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_2_3_7 (
    .clk        ( clk ),
    .in_id0     ( lvl1_id[3] ),
    .in_data0   ( lvl1_data[3] ),
    .in_id1     ( lvl1_id[7] ),
    .in_data1   ( lvl1_data[7] ),
    .out_id0    ( lvl2_id[3] ),
    .out_data0  ( lvl2_data[3] ),
    .out_id1    ( lvl2_id[7] ),
    .out_data1  ( lvl2_data[7] )
);

// level 2: pass-through 8
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_2_8 (
    .clk        ( clk ),
    .in_data    ( lvl1_data[8] ),
    .out_data   ( lvl2_data[8] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_2_8 (
    .clk        ( clk ),
    .in_data    ( lvl1_id[8] ),
    .out_data   ( lvl2_id[8] )
);

// level 2: pass-through 9
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_2_9 (
    .clk        ( clk ),
    .in_data    ( lvl1_data[9] ),
    .out_data   ( lvl2_data[9] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_2_9 (
    .clk        ( clk ),
    .in_data    ( lvl1_id[9] ),
    .out_data   ( lvl2_id[9] )
);

// level 2: pass-through 10
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_2_10 (
    .clk        ( clk ),
    .in_data    ( lvl1_data[10] ),
    .out_data   ( lvl2_data[10] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_2_10 (
    .clk        ( clk ),
    .in_data    ( lvl1_id[10] ),
    .out_data   ( lvl2_id[10] )
);

// level 2: pass-through 11
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_2_11 (
    .clk        ( clk ),
    .in_data    ( lvl1_data[11] ),
    .out_data   ( lvl2_data[11] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_2_11 (
    .clk        ( clk ),
    .in_data    ( lvl1_id[11] ),
    .out_data   ( lvl2_id[11] )
);


// ** level 3 **
// [[4,8],[5,9],[6,10],[7,11],[0,2],[1,3]]

wire    [ID-1:0]    lvl3_id [11:0];
wire    [DATA-1:0]  lvl3_data [11:0];

// level 3: compex(4,8)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_3_4_8 (
    .clk        ( clk ),
    .in_id0     ( lvl2_id[4] ),
    .in_data0   ( lvl2_data[4] ),
    .in_id1     ( lvl2_id[8] ),
    .in_data1   ( lvl2_data[8] ),
    .out_id0    ( lvl3_id[4] ),
    .out_data0  ( lvl3_data[4] ),
    .out_id1    ( lvl3_id[8] ),
    .out_data1  ( lvl3_data[8] )
);

// level 3: compex(5,9)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_3_5_9 (
    .clk        ( clk ),
    .in_id0     ( lvl2_id[5] ),
    .in_data0   ( lvl2_data[5] ),
    .in_id1     ( lvl2_id[9] ),
    .in_data1   ( lvl2_data[9] ),
    .out_id0    ( lvl3_id[5] ),
    .out_data0  ( lvl3_data[5] ),
    .out_id1    ( lvl3_id[9] ),
    .out_data1  ( lvl3_data[9] )
);

// level 3: compex(6,10)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_3_6_10 (
    .clk        ( clk ),
    .in_id0     ( lvl2_id[6] ),
    .in_data0   ( lvl2_data[6] ),
    .in_id1     ( lvl2_id[10] ),
    .in_data1   ( lvl2_data[10] ),
    .out_id0    ( lvl3_id[6] ),
    .out_data0  ( lvl3_data[6] ),
    .out_id1    ( lvl3_id[10] ),
    .out_data1  ( lvl3_data[10] )
);

// level 3: compex(7,11)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_3_7_11 (
    .clk        ( clk ),
    .in_id0     ( lvl2_id[7] ),
    .in_data0   ( lvl2_data[7] ),
    .in_id1     ( lvl2_id[11] ),
    .in_data1   ( lvl2_data[11] ),
    .out_id0    ( lvl3_id[7] ),
    .out_data0  ( lvl3_data[7] ),
    .out_id1    ( lvl3_id[11] ),
    .out_data1  ( lvl3_data[11] )
);

// level 3: compex(0,2)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_3_0_2 (
    .clk        ( clk ),
    .in_id0     ( lvl2_id[0] ),
    .in_data0   ( lvl2_data[0] ),
    .in_id1     ( lvl2_id[2] ),
    .in_data1   ( lvl2_data[2] ),
    .out_id0    ( lvl3_id[0] ),
    .out_data0  ( lvl3_data[0] ),
    .out_id1    ( lvl3_id[2] ),
    .out_data1  ( lvl3_data[2] )
);

// level 3: compex(1,3)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_3_1_3 (
    .clk        ( clk ),
    .in_id0     ( lvl2_id[1] ),
    .in_data0   ( lvl2_data[1] ),
    .in_id1     ( lvl2_id[3] ),
    .in_data1   ( lvl2_data[3] ),
    .out_id0    ( lvl3_id[1] ),
    .out_data0  ( lvl3_data[1] ),
    .out_id1    ( lvl3_id[3] ),
    .out_data1  ( lvl3_data[3] )
);


// ** level 4 **
// [[4,6],[5,7],[8,10],[9,11],[0,1]]

wire    [ID-1:0]    lvl4_id [11:0];
wire    [DATA-1:0]  lvl4_data [11:0];

// level 4: compex(4,6)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_4_4_6 (
    .clk        ( clk ),
    .in_id0     ( lvl3_id[4] ),
    .in_data0   ( lvl3_data[4] ),
    .in_id1     ( lvl3_id[6] ),
    .in_data1   ( lvl3_data[6] ),
    .out_id0    ( lvl4_id[4] ),
    .out_data0  ( lvl4_data[4] ),
    .out_id1    ( lvl4_id[6] ),
    .out_data1  ( lvl4_data[6] )
);

// level 4: compex(5,7)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_4_5_7 (
    .clk        ( clk ),
    .in_id0     ( lvl3_id[5] ),
    .in_data0   ( lvl3_data[5] ),
    .in_id1     ( lvl3_id[7] ),
    .in_data1   ( lvl3_data[7] ),
    .out_id0    ( lvl4_id[5] ),
    .out_data0  ( lvl4_data[5] ),
    .out_id1    ( lvl4_id[7] ),
    .out_data1  ( lvl4_data[7] )
);

// level 4: compex(8,10)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_4_8_10 (
    .clk        ( clk ),
    .in_id0     ( lvl3_id[8] ),
    .in_data0   ( lvl3_data[8] ),
    .in_id1     ( lvl3_id[10] ),
    .in_data1   ( lvl3_data[10] ),
    .out_id0    ( lvl4_id[8] ),
    .out_data0  ( lvl4_data[8] ),
    .out_id1    ( lvl4_id[10] ),
    .out_data1  ( lvl4_data[10] )
);

// level 4: compex(9,11)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_4_9_11 (
    .clk        ( clk ),
    .in_id0     ( lvl3_id[9] ),
    .in_data0   ( lvl3_data[9] ),
    .in_id1     ( lvl3_id[11] ),
    .in_data1   ( lvl3_data[11] ),
    .out_id0    ( lvl4_id[9] ),
    .out_data0  ( lvl4_data[9] ),
    .out_id1    ( lvl4_id[11] ),
    .out_data1  ( lvl4_data[11] )
);

// level 4: compex(0,1)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_4_0_1 (
    .clk        ( clk ),
    .in_id0     ( lvl3_id[0] ),
    .in_data0   ( lvl3_data[0] ),
    .in_id1     ( lvl3_id[1] ),
    .in_data1   ( lvl3_data[1] ),
    .out_id0    ( lvl4_id[0] ),
    .out_data0  ( lvl4_data[0] ),
    .out_id1    ( lvl4_id[1] ),
    .out_data1  ( lvl4_data[1] )
);

// level 4: pass-through 2
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_4_2 (
    .clk        ( clk ),
    .in_data    ( lvl3_data[2] ),
    .out_data   ( lvl4_data[2] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_4_2 (
    .clk        ( clk ),
    .in_data    ( lvl3_id[2] ),
    .out_data   ( lvl4_id[2] )
);

// level 4: pass-through 3
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_4_3 (
    .clk        ( clk ),
    .in_data    ( lvl3_data[3] ),
    .out_data   ( lvl4_data[3] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_4_3 (
    .clk        ( clk ),
    .in_data    ( lvl3_id[3] ),
    .out_data   ( lvl4_id[3] )
);


// ** level 5 **
// [[2,8],[3,9],[10,11]]

wire    [ID-1:0]    lvl5_id [11:0];
wire    [DATA-1:0]  lvl5_data [11:0];

// level 5: compex(2,8)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_5_2_8 (
    .clk        ( clk ),
    .in_id0     ( lvl4_id[2] ),
    .in_data0   ( lvl4_data[2] ),
    .in_id1     ( lvl4_id[8] ),
    .in_data1   ( lvl4_data[8] ),
    .out_id0    ( lvl5_id[2] ),
    .out_data0  ( lvl5_data[2] ),
    .out_id1    ( lvl5_id[8] ),
    .out_data1  ( lvl5_data[8] )
);

// level 5: compex(3,9)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_5_3_9 (
    .clk        ( clk ),
    .in_id0     ( lvl4_id[3] ),
    .in_data0   ( lvl4_data[3] ),
    .in_id1     ( lvl4_id[9] ),
    .in_data1   ( lvl4_data[9] ),
    .out_id0    ( lvl5_id[3] ),
    .out_data0  ( lvl5_data[3] ),
    .out_id1    ( lvl5_id[9] ),
    .out_data1  ( lvl5_data[9] )
);

// level 5: compex(10,11)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_5_10_11 (
    .clk        ( clk ),
    .in_id0     ( lvl4_id[10] ),
    .in_data0   ( lvl4_data[10] ),
    .in_id1     ( lvl4_id[11] ),
    .in_data1   ( lvl4_data[11] ),
    .out_id0    ( lvl5_id[10] ),
    .out_data0  ( lvl5_data[10] ),
    .out_id1    ( lvl5_id[11] ),
    .out_data1  ( lvl5_data[11] )
);

// level 5: pass-through 0
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_5_0 (
    .clk        ( clk ),
    .in_data    ( lvl4_data[0] ),
    .out_data   ( lvl5_data[0] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_5_0 (
    .clk        ( clk ),
    .in_data    ( lvl4_id[0] ),
    .out_data   ( lvl5_id[0] )
);

// level 5: pass-through 1
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_5_1 (
    .clk        ( clk ),
    .in_data    ( lvl4_data[1] ),
    .out_data   ( lvl5_data[1] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_5_1 (
    .clk        ( clk ),
    .in_data    ( lvl4_id[1] ),
    .out_data   ( lvl5_id[1] )
);

// level 5: pass-through 4
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_5_4 (
    .clk        ( clk ),
    .in_data    ( lvl4_data[4] ),
    .out_data   ( lvl5_data[4] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_5_4 (
    .clk        ( clk ),
    .in_data    ( lvl4_id[4] ),
    .out_data   ( lvl5_id[4] )
);

// level 5: pass-through 5
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_5_5 (
    .clk        ( clk ),
    .in_data    ( lvl4_data[5] ),
    .out_data   ( lvl5_data[5] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_5_5 (
    .clk        ( clk ),
    .in_data    ( lvl4_id[5] ),
    .out_data   ( lvl5_id[5] )
);

// level 5: pass-through 6
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_5_6 (
    .clk        ( clk ),
    .in_data    ( lvl4_data[6] ),
    .out_data   ( lvl5_data[6] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_5_6 (
    .clk        ( clk ),
    .in_data    ( lvl4_id[6] ),
    .out_data   ( lvl5_id[6] )
);

// level 5: pass-through 7
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_5_7 (
    .clk        ( clk ),
    .in_data    ( lvl4_data[7] ),
    .out_data   ( lvl5_data[7] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_5_7 (
    .clk        ( clk ),
    .in_data    ( lvl4_id[7] ),
    .out_data   ( lvl5_id[7] )
);


// ** level 6 **
// [[2,4],[3,5],[6,8],[7,9]]

wire    [ID-1:0]    lvl6_id [11:0];
wire    [DATA-1:0]  lvl6_data [11:0];

// level 6: compex(2,4)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_6_2_4 (
    .clk        ( clk ),
    .in_id0     ( lvl5_id[2] ),
    .in_data0   ( lvl5_data[2] ),
    .in_id1     ( lvl5_id[4] ),
    .in_data1   ( lvl5_data[4] ),
    .out_id0    ( lvl6_id[2] ),
    .out_data0  ( lvl6_data[2] ),
    .out_id1    ( lvl6_id[4] ),
    .out_data1  ( lvl6_data[4] )
);

// level 6: compex(3,5)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_6_3_5 (
    .clk        ( clk ),
    .in_id0     ( lvl5_id[3] ),
    .in_data0   ( lvl5_data[3] ),
    .in_id1     ( lvl5_id[5] ),
    .in_data1   ( lvl5_data[5] ),
    .out_id0    ( lvl6_id[3] ),
    .out_data0  ( lvl6_data[3] ),
    .out_id1    ( lvl6_id[5] ),
    .out_data1  ( lvl6_data[5] )
);

// level 6: compex(6,8)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_6_6_8 (
    .clk        ( clk ),
    .in_id0     ( lvl5_id[6] ),
    .in_data0   ( lvl5_data[6] ),
    .in_id1     ( lvl5_id[8] ),
    .in_data1   ( lvl5_data[8] ),
    .out_id0    ( lvl6_id[6] ),
    .out_data0  ( lvl6_data[6] ),
    .out_id1    ( lvl6_id[8] ),
    .out_data1  ( lvl6_data[8] )
);

// level 6: compex(7,9)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_6_7_9 (
    .clk        ( clk ),
    .in_id0     ( lvl5_id[7] ),
    .in_data0   ( lvl5_data[7] ),
    .in_id1     ( lvl5_id[9] ),
    .in_data1   ( lvl5_data[9] ),
    .out_id0    ( lvl6_id[7] ),
    .out_data0  ( lvl6_data[7] ),
    .out_id1    ( lvl6_id[9] ),
    .out_data1  ( lvl6_data[9] )
);

// level 6: pass-through 0
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_6_0 (
    .clk        ( clk ),
    .in_data    ( lvl5_data[0] ),
    .out_data   ( lvl6_data[0] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_6_0 (
    .clk        ( clk ),
    .in_data    ( lvl5_id[0] ),
    .out_data   ( lvl6_id[0] )
);

// level 6: pass-through 1
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_6_1 (
    .clk        ( clk ),
    .in_data    ( lvl5_data[1] ),
    .out_data   ( lvl6_data[1] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_6_1 (
    .clk        ( clk ),
    .in_data    ( lvl5_id[1] ),
    .out_data   ( lvl6_id[1] )
);

// level 6: pass-through 10
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_6_10 (
    .clk        ( clk ),
    .in_data    ( lvl5_data[10] ),
    .out_data   ( lvl6_data[10] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_6_10 (
    .clk        ( clk ),
    .in_data    ( lvl5_id[10] ),
    .out_data   ( lvl6_id[10] )
);

// level 6: pass-through 11
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_6_11 (
    .clk        ( clk ),
    .in_data    ( lvl5_data[11] ),
    .out_data   ( lvl6_data[11] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_6_11 (
    .clk        ( clk ),
    .in_data    ( lvl5_id[11] ),
    .out_data   ( lvl6_id[11] )
);


// ** level 7 **
// [[2,3],[4,5],[6,7],[8,9]]

wire    [ID-1:0]    lvl7_id [11:0];
wire    [DATA-1:0]  lvl7_data [11:0];

// level 7: compex(2,3)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_7_2_3 (
    .clk        ( clk ),
    .in_id0     ( lvl6_id[2] ),
    .in_data0   ( lvl6_data[2] ),
    .in_id1     ( lvl6_id[3] ),
    .in_data1   ( lvl6_data[3] ),
    .out_id0    ( lvl7_id[2] ),
    .out_data0  ( lvl7_data[2] ),
    .out_id1    ( lvl7_id[3] ),
    .out_data1  ( lvl7_data[3] )
);

// level 7: compex(4,5)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_7_4_5 (
    .clk        ( clk ),
    .in_id0     ( lvl6_id[4] ),
    .in_data0   ( lvl6_data[4] ),
    .in_id1     ( lvl6_id[5] ),
    .in_data1   ( lvl6_data[5] ),
    .out_id0    ( lvl7_id[4] ),
    .out_data0  ( lvl7_data[4] ),
    .out_id1    ( lvl7_id[5] ),
    .out_data1  ( lvl7_data[5] )
);

// level 7: compex(6,7)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_7_6_7 (
    .clk        ( clk ),
    .in_id0     ( lvl6_id[6] ),
    .in_data0   ( lvl6_data[6] ),
    .in_id1     ( lvl6_id[7] ),
    .in_data1   ( lvl6_data[7] ),
    .out_id0    ( lvl7_id[6] ),
    .out_data0  ( lvl7_data[6] ),
    .out_id1    ( lvl7_id[7] ),
    .out_data1  ( lvl7_data[7] )
);

// level 7: compex(8,9)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_7_8_9 (
    .clk        ( clk ),
    .in_id0     ( lvl6_id[8] ),
    .in_data0   ( lvl6_data[8] ),
    .in_id1     ( lvl6_id[9] ),
    .in_data1   ( lvl6_data[9] ),
    .out_id0    ( lvl7_id[8] ),
    .out_data0  ( lvl7_data[8] ),
    .out_id1    ( lvl7_id[9] ),
    .out_data1  ( lvl7_data[9] )
);

// level 7: pass-through 0
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_7_0 (
    .clk        ( clk ),
    .in_data    ( lvl6_data[0] ),
    .out_data   ( lvl7_data[0] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_7_0 (
    .clk        ( clk ),
    .in_data    ( lvl6_id[0] ),
    .out_data   ( lvl7_id[0] )
);

// level 7: pass-through 1
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_7_1 (
    .clk        ( clk ),
    .in_data    ( lvl6_data[1] ),
    .out_data   ( lvl7_data[1] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_7_1 (
    .clk        ( clk ),
    .in_data    ( lvl6_id[1] ),
    .out_data   ( lvl7_id[1] )
);

// level 7: pass-through 10
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_7_10 (
    .clk        ( clk ),
    .in_data    ( lvl6_data[10] ),
    .out_data   ( lvl7_data[10] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_7_10 (
    .clk        ( clk ),
    .in_data    ( lvl6_id[10] ),
    .out_data   ( lvl7_id[10] )
);

// level 7: pass-through 11
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_7_11 (
    .clk        ( clk ),
    .in_data    ( lvl6_data[11] ),
    .out_data   ( lvl7_data[11] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_7_11 (
    .clk        ( clk ),
    .in_data    ( lvl6_id[11] ),
    .out_data   ( lvl7_id[11] )
);


// ** level 8 **
// [[1,8],[3,10]]

wire    [ID-1:0]    lvl8_id [11:0];
wire    [DATA-1:0]  lvl8_data [11:0];

// level 8: compex(1,8)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_8_1_8 (
    .clk        ( clk ),
    .in_id0     ( lvl7_id[1] ),
    .in_data0   ( lvl7_data[1] ),
    .in_id1     ( lvl7_id[8] ),
    .in_data1   ( lvl7_data[8] ),
    .out_id0    ( lvl8_id[1] ),
    .out_data0  ( lvl8_data[1] ),
    .out_id1    ( lvl8_id[8] ),
    .out_data1  ( lvl8_data[8] )
);

// level 8: compex(3,10)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_8_3_10 (
    .clk        ( clk ),
    .in_id0     ( lvl7_id[3] ),
    .in_data0   ( lvl7_data[3] ),
    .in_id1     ( lvl7_id[10] ),
    .in_data1   ( lvl7_data[10] ),
    .out_id0    ( lvl8_id[3] ),
    .out_data0  ( lvl8_data[3] ),
    .out_id1    ( lvl8_id[10] ),
    .out_data1  ( lvl8_data[10] )
);

// level 8: pass-through 0
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_8_0 (
    .clk        ( clk ),
    .in_data    ( lvl7_data[0] ),
    .out_data   ( lvl8_data[0] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_8_0 (
    .clk        ( clk ),
    .in_data    ( lvl7_id[0] ),
    .out_data   ( lvl8_id[0] )
);

// level 8: pass-through 2
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_8_2 (
    .clk        ( clk ),
    .in_data    ( lvl7_data[2] ),
    .out_data   ( lvl8_data[2] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_8_2 (
    .clk        ( clk ),
    .in_data    ( lvl7_id[2] ),
    .out_data   ( lvl8_id[2] )
);

// level 8: pass-through 4
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_8_4 (
    .clk        ( clk ),
    .in_data    ( lvl7_data[4] ),
    .out_data   ( lvl8_data[4] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_8_4 (
    .clk        ( clk ),
    .in_data    ( lvl7_id[4] ),
    .out_data   ( lvl8_id[4] )
);

// level 8: pass-through 5
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_8_5 (
    .clk        ( clk ),
    .in_data    ( lvl7_data[5] ),
    .out_data   ( lvl8_data[5] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_8_5 (
    .clk        ( clk ),
    .in_data    ( lvl7_id[5] ),
    .out_data   ( lvl8_id[5] )
);

// level 8: pass-through 6
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_8_6 (
    .clk        ( clk ),
    .in_data    ( lvl7_data[6] ),
    .out_data   ( lvl8_data[6] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_8_6 (
    .clk        ( clk ),
    .in_data    ( lvl7_id[6] ),
    .out_data   ( lvl8_id[6] )
);

// level 8: pass-through 7
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_8_7 (
    .clk        ( clk ),
    .in_data    ( lvl7_data[7] ),
    .out_data   ( lvl8_data[7] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_8_7 (
    .clk        ( clk ),
    .in_data    ( lvl7_id[7] ),
    .out_data   ( lvl8_id[7] )
);

// level 8: pass-through 9
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_8_9 (
    .clk        ( clk ),
    .in_data    ( lvl7_data[9] ),
    .out_data   ( lvl8_data[9] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_8_9 (
    .clk        ( clk ),
    .in_data    ( lvl7_id[9] ),
    .out_data   ( lvl8_id[9] )
);

// level 8: pass-through 11
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_8_11 (
    .clk        ( clk ),
    .in_data    ( lvl7_data[11] ),
    .out_data   ( lvl8_data[11] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_8_11 (
    .clk        ( clk ),
    .in_data    ( lvl7_id[11] ),
    .out_data   ( lvl8_id[11] )
);


// ** level 9 **
// [[1,4],[3,6],[5,8],[7,10]]

wire    [ID-1:0]    lvl9_id [11:0];
wire    [DATA-1:0]  lvl9_data [11:0];

// level 9: compex(1,4)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_9_1_4 (
    .clk        ( clk ),
    .in_id0     ( lvl8_id[1] ),
    .in_data0   ( lvl8_data[1] ),
    .in_id1     ( lvl8_id[4] ),
    .in_data1   ( lvl8_data[4] ),
    .out_id0    ( lvl9_id[1] ),
    .out_data0  ( lvl9_data[1] ),
    .out_id1    ( lvl9_id[4] ),
    .out_data1  ( lvl9_data[4] )
);

// level 9: compex(3,6)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_9_3_6 (
    .clk        ( clk ),
    .in_id0     ( lvl8_id[3] ),
    .in_data0   ( lvl8_data[3] ),
    .in_id1     ( lvl8_id[6] ),
    .in_data1   ( lvl8_data[6] ),
    .out_id0    ( lvl9_id[3] ),
    .out_data0  ( lvl9_data[3] ),
    .out_id1    ( lvl9_id[6] ),
    .out_data1  ( lvl9_data[6] )
);

// level 9: compex(5,8)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_9_5_8 (
    .clk        ( clk ),
    .in_id0     ( lvl8_id[5] ),
    .in_data0   ( lvl8_data[5] ),
    .in_id1     ( lvl8_id[8] ),
    .in_data1   ( lvl8_data[8] ),
    .out_id0    ( lvl9_id[5] ),
    .out_data0  ( lvl9_data[5] ),
    .out_id1    ( lvl9_id[8] ),
    .out_data1  ( lvl9_data[8] )
);

// level 9: compex(7,10)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( PIPELINE )
) dlsc_compex_inst_9_7_10 (
    .clk        ( clk ),
    .in_id0     ( lvl8_id[7] ),
    .in_data0   ( lvl8_data[7] ),
    .in_id1     ( lvl8_id[10] ),
    .in_data1   ( lvl8_data[10] ),
    .out_id0    ( lvl9_id[7] ),
    .out_data0  ( lvl9_data[7] ),
    .out_id1    ( lvl9_id[10] ),
    .out_data1  ( lvl9_data[10] )
);

// level 9: pass-through 0
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_9_0 (
    .clk        ( clk ),
    .in_data    ( lvl8_data[0] ),
    .out_data   ( lvl9_data[0] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_9_0 (
    .clk        ( clk ),
    .in_data    ( lvl8_id[0] ),
    .out_data   ( lvl9_id[0] )
);

// level 9: pass-through 2
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_9_2 (
    .clk        ( clk ),
    .in_data    ( lvl8_data[2] ),
    .out_data   ( lvl9_data[2] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_9_2 (
    .clk        ( clk ),
    .in_data    ( lvl8_id[2] ),
    .out_data   ( lvl9_id[2] )
);

// level 9: pass-through 9
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_9_9 (
    .clk        ( clk ),
    .in_data    ( lvl8_data[9] ),
    .out_data   ( lvl9_data[9] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_9_9 (
    .clk        ( clk ),
    .in_data    ( lvl8_id[9] ),
    .out_data   ( lvl9_id[9] )
);

// level 9: pass-through 11
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_9_11 (
    .clk        ( clk ),
    .in_data    ( lvl8_data[11] ),
    .out_data   ( lvl9_data[11] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (PIPELINE > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_9_11 (
    .clk        ( clk ),
    .in_data    ( lvl8_id[11] ),
    .out_data   ( lvl9_id[11] )
);


// ** level 10 **
// [[1,2],[3,4],[5,6],[7,8],[9,10]]

wire    [ID-1:0]    lvl10_id [11:0];
wire    [DATA-1:0]  lvl10_data [11:0];

// level 10: compex(1,2)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( 1 )
) dlsc_compex_inst_10_1_2 (
    .clk        ( clk ),
    .in_id0     ( lvl9_id[1] ),
    .in_data0   ( lvl9_data[1] ),
    .in_id1     ( lvl9_id[2] ),
    .in_data1   ( lvl9_data[2] ),
    .out_id0    ( lvl10_id[1] ),
    .out_data0  ( lvl10_data[1] ),
    .out_id1    ( lvl10_id[2] ),
    .out_data1  ( lvl10_data[2] )
);

// level 10: compex(3,4)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( 1 )
) dlsc_compex_inst_10_3_4 (
    .clk        ( clk ),
    .in_id0     ( lvl9_id[3] ),
    .in_data0   ( lvl9_data[3] ),
    .in_id1     ( lvl9_id[4] ),
    .in_data1   ( lvl9_data[4] ),
    .out_id0    ( lvl10_id[3] ),
    .out_data0  ( lvl10_data[3] ),
    .out_id1    ( lvl10_id[4] ),
    .out_data1  ( lvl10_data[4] )
);

// level 10: compex(5,6)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( 1 )
) dlsc_compex_inst_10_5_6 (
    .clk        ( clk ),
    .in_id0     ( lvl9_id[5] ),
    .in_data0   ( lvl9_data[5] ),
    .in_id1     ( lvl9_id[6] ),
    .in_data1   ( lvl9_data[6] ),
    .out_id0    ( lvl10_id[5] ),
    .out_data0  ( lvl10_data[5] ),
    .out_id1    ( lvl10_id[6] ),
    .out_data1  ( lvl10_data[6] )
);

// level 10: compex(7,8)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( 1 )
) dlsc_compex_inst_10_7_8 (
    .clk        ( clk ),
    .in_id0     ( lvl9_id[7] ),
    .in_data0   ( lvl9_data[7] ),
    .in_id1     ( lvl9_id[8] ),
    .in_data1   ( lvl9_data[8] ),
    .out_id0    ( lvl10_id[7] ),
    .out_data0  ( lvl10_data[7] ),
    .out_id1    ( lvl10_id[8] ),
    .out_data1  ( lvl10_data[8] )
);

// level 10: compex(9,10)
dlsc_compex #(
    .DATA       ( DATA ),
    .ID         ( ID ),
    .PIPELINE   ( 1 )
) dlsc_compex_inst_10_9_10 (
    .clk        ( clk ),
    .in_id0     ( lvl9_id[9] ),
    .in_data0   ( lvl9_data[9] ),
    .in_id1     ( lvl9_id[10] ),
    .in_data1   ( lvl9_data[10] ),
    .out_id0    ( lvl10_id[9] ),
    .out_data0  ( lvl10_data[9] ),
    .out_id1    ( lvl10_id[10] ),
    .out_data1  ( lvl10_data[10] )
);

// level 10: pass-through 0
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (1 > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_10_0 (
    .clk        ( clk ),
    .in_data    ( lvl9_data[0] ),
    .out_data   ( lvl10_data[0] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (1 > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_10_0 (
    .clk        ( clk ),
    .in_data    ( lvl9_id[0] ),
    .out_data   ( lvl10_id[0] )
);

// level 10: pass-through 11
dlsc_pipedelay #(
    .DATA       ( DATA ),
    .DELAY      ( (1 > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_data_10_11 (
    .clk        ( clk ),
    .in_data    ( lvl9_data[11] ),
    .out_data   ( lvl10_data[11] )
);
dlsc_pipedelay #(
    .DATA       ( ID ),
    .DELAY      ( (1 > 0) ? 2 : 1 )
) dlsc_pipedelay_inst_id_10_11 (
    .clk        ( clk ),
    .in_data    ( lvl9_id[11] ),
    .out_data   ( lvl10_id[11] )
);


// ** outputs **
assign out_id  [ (0*  ID) +:   ID ] = lvl10_id[0];
assign out_data[ (0*DATA) +: DATA ] = lvl10_data[0];
assign out_id  [ (1*  ID) +:   ID ] = lvl10_id[1];
assign out_data[ (1*DATA) +: DATA ] = lvl10_data[1];
assign out_id  [ (2*  ID) +:   ID ] = lvl10_id[2];
assign out_data[ (2*DATA) +: DATA ] = lvl10_data[2];
assign out_id  [ (3*  ID) +:   ID ] = lvl10_id[3];
assign out_data[ (3*DATA) +: DATA ] = lvl10_data[3];
assign out_id  [ (4*  ID) +:   ID ] = lvl10_id[4];
assign out_data[ (4*DATA) +: DATA ] = lvl10_data[4];
assign out_id  [ (5*  ID) +:   ID ] = lvl10_id[5];
assign out_data[ (5*DATA) +: DATA ] = lvl10_data[5];
assign out_id  [ (6*  ID) +:   ID ] = lvl10_id[6];
assign out_data[ (6*DATA) +: DATA ] = lvl10_data[6];
assign out_id  [ (7*  ID) +:   ID ] = lvl10_id[7];
assign out_data[ (7*DATA) +: DATA ] = lvl10_data[7];
assign out_id  [ (8*  ID) +:   ID ] = lvl10_id[8];
assign out_data[ (8*DATA) +: DATA ] = lvl10_data[8];
assign out_id  [ (9*  ID) +:   ID ] = lvl10_id[9];
assign out_data[ (9*DATA) +: DATA ] = lvl10_data[9];
assign out_id  [ (10*  ID) +:   ID ] = lvl10_id[10];
assign out_data[ (10*DATA) +: DATA ] = lvl10_data[10];
assign out_id  [ (11*  ID) +:   ID ] = lvl10_id[11];
assign out_data[ (11*DATA) +: DATA ] = lvl10_data[11];


// ** delay valid/meta **
dlsc_pipedelay_valid #(
    .DATA       ( META ),
    .DELAY      ( 9 * (PIPELINE?2:1) + 2 ) // 1 or 2 cycles per intermediate stage; last stage always takes 2
) dlsc_pipedelay_valid_inst (
    .clk        ( clk ),
    .rst        ( rst ),
    .in_valid   ( in_valid ),
    .in_data    ( in_meta ),
    .out_valid  ( out_valid ),
    .out_data   ( out_meta )
);

endmodule

