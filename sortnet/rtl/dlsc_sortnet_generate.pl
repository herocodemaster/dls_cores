#!/usr/bin/perl

# 
# Copyright (c) 2011, Daniel Strother < http://danstrother.com/ >
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#   - Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#   - Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   - The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

my $inputs = $ARGV[0];

if($inputs <= 1 || $inputs > 16)
{
    print "inputs out of bounds: 1 < inputs <= 16\n";
    exit;
}

# generate modules
for my $i (2 .. $inputs)
{
   @args = ("./dlsc_sortnet_generate_module.pl", "$i");
   system(@args) == 0
       or die "failed to invoke ./dlsc_sortnet_generate_module.pl"
}

# create wrapper

open(MODFILE,">dlsc_sortnet.v");

# module
print MODFILE <<ENDV;
// 
// Copyright (c) 2011, Daniel Strother < http://danstrother.com/ >
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//   - Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//   - Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//   - The name of the author may not be used to endorse or promote products
//     derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

// auto-generated by dlsc_sortnet_generate.pl
// maximum inputs: $inputs

module dlsc_sortnet #(
    parameter INPUTS    = 1,        // 1 to $inputs
    parameter META      = 1,        // width of bypassed metadata
    parameter DATA      = 16,       // width of data for each element
    parameter ID        = 1,        // width of IDs for each element
    parameter PIPELINE  = 0,
    // derived; don't touch
    parameter ID_I      = (INPUTS*ID),
    parameter DATA_I    = (INPUTS*DATA)
) (
    input   wire                    clk,
    input   wire                    rst,

    input   wire                    in_valid,       // qualifier
    input   wire    [META-1:0]      in_meta,        // metadata to be delay-matched to sorting operation
    input   wire    [DATA_I-1:0]    in_data,        // unsorted data
    input   wire    [ID_I-1:0]      in_id,          // identifiers for unsorted data

    output  wire                    out_valid,      // delayed qualifier
    output  wire    [META-1:0]      out_meta,       // delayed in_meta
    output  wire    [DATA_I-1:0]    out_data,       // sorted data
    output  wire    [ID_I-1:0]      out_id          // identifiers for sorted data
);

`ifdef SIMULATION
initial begin
    if(INPUTS > $inputs) begin
        \$display("[%m] *** ERROR *** INPUTS (%0d) exceeds generated maximum ($inputs)",INPUTS);
    end
end
`endif

generate
    if(INPUTS == 1) begin:GEN_1
        assign out_valid    = in_valid;
        assign out_meta     = in_meta;
        assign out_data     = in_data;
        assign out_id       = in_id;
    end
ENDV


for my $i (2 .. $inputs)
{
print MODFILE <<ENDV;
    else if(INPUTS == $i) begin:GEN_$i
        dlsc_sortnet_$i #(
            .META       ( META ),
            .DATA       ( DATA ),
            .ID         ( ID ),
            .PIPELINE   ( PIPELINE )
        ) dlsc_sortnet_$i\_inst (
            .clk        ( clk ),
            .rst        ( rst ),
            .in_valid   ( in_valid ),
            .in_meta    ( in_meta ),
            .in_data    ( in_data ),
            .in_id      ( in_id ),
            .out_valid  ( out_valid ),
            .out_meta   ( out_meta ),
            .out_data   ( out_data ),
            .out_id     ( out_id )
        );
    end
ENDV
}


print MODFILE <<ENDV;
    else begin:GEN_INVALID
        assign out_valid    = 1'bx;
        assign out_meta     = {META{1'bx}};
        assign out_data     = {DATA_I{1'bx}};
        assign out_id       = {ID_I{1'bx}};
    end
endgenerate

endmodule

ENDV

close(MODFILE);

